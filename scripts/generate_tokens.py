#!/usr/bin/env python3
"""Generate high-entropy webhook tokens for HooknSock deployments."""
from __future__ import annotations

import argparse
import os
import secrets
import sys
from pathlib import Path
from typing import Iterable, List, Tuple

DEFAULT_ENV_VAR = "WEBHOOK_TOKENS"
DEFAULT_BYTES = 48  # ~384 bits of entropy -> ~64 char url-safe strings


def parse_service_specs(specs: Iterable[str]) -> List[Tuple[str, str]]:
    """Parse channel[:domain] specs into (channel, domain) tuples."""
    parsed: List[Tuple[str, str]] = []
    for raw in specs:
        spec = (raw or "").strip()
        if not spec:
            continue
        if ":" in spec:
            channel, domain = spec.split(":", 1)
        else:
            channel, domain = spec, "*"

        channel = channel.strip()
        domain = domain.strip() or "*"
        if not channel:
            raise ValueError(f"Invalid service spec '{raw}': channel is required")
        parsed.append((channel, domain))
    if not parsed:
        raise ValueError("At least one --service channel[:domain] must be provided")
    return parsed


def generate_token(nbytes: int) -> str:
    """Return a url-safe token with nbytes of entropy."""
    if nbytes < 16:
        raise ValueError("Refusing to generate tokens with <128 bits of entropy")
    return secrets.token_urlsafe(nbytes)


def redact(token: str) -> str:
    if len(token) <= 6:
        return "***"
    return f"{token[:3]}...{token[-3:]}"


def write_env_file(path: Path, env_var: str, values: List[str]) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    fd = os.open(path, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
    with os.fdopen(fd, "w", encoding="utf-8") as handle:
        handle.write("# Autogenerated by scripts/generate_tokens.py\n")
        handle.write(f"{env_var}={','.join(values)}\n")
    os.chmod(path, 0o600)


def main(argv: Iterable[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--service",
        action="append",
        metavar="CHANNEL[:DOMAIN]",
        help="Add a channel token; DOMAIN defaults to *",
    )
    parser.add_argument(
        "--bytes",
        type=int,
        default=DEFAULT_BYTES,
        help="Entropy in bytes per token (default: %(default)s)",
    )
    parser.add_argument(
        "--env-file",
        type=Path,
        help="Optional path to write an env file (permissions set to 600)",
    )
    parser.add_argument(
        "--env-var",
        default=DEFAULT_ENV_VAR,
        help="Environment variable name to store tokens (default: %(default)s)",
    )
    parser.add_argument(
        "--show",
        action="store_true",
        help="Print the generated tokens to stdout (useful for password managers)",
    )
    parser.add_argument(
        "--quiet",
        action="store_true",
        help="Suppress informational output (errors still raised)",
    )

    args = parser.parse_args(list(argv) if argv is not None else None)

    try:
        services = parse_service_specs(args.service or [])
    except ValueError as exc:
        parser.error(str(exc))

    mappings: List[str] = []
    disclosures: List[Tuple[str, str, str]] = []
    for channel, domain in services:
        token = generate_token(args.bytes)
        mappings.append(f"{token}:{channel}:{domain}")
        disclosures.append((token, channel, domain))

    if args.env_file:
        write_env_file(args.env_file, args.env_var, mappings)
        if not args.quiet:
            print(f"wrote secrets to {args.env_file} (chmod 600)")

    if args.show:
        for token, channel, domain in disclosures:
            print(f"TOKEN={token}\tCHANNEL={channel}\tDOMAIN={domain}")
        if not args.quiet:
            target = args.env_file or "memory"
            print(
                f"store these tokens securely; they are only persisted in {target}",
                file=sys.stderr,
            )
    elif not args.quiet:
        for token, channel, domain in disclosures:
            print(
                f"generated token for channel '{channel}' (domain '{domain}'): {redact(token)}"
            )
        print("use --show to display full values or write them to a secrets manager")

    return 0


if __name__ == "__main__":
    sys.exit(main())
